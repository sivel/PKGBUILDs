# $Id$
# Maintainer: Sebastien "Seblu" Luttringer

# ALARM: Kevin Mihelich <kevin@archlinuxarm.org>
#  - ARM patches, adjustments

pkgname=docker
pkgver=0.10.0
pkgrel=1
epoch=1
pkgdesc='Pack, ship and run any application as a lightweight container'
arch=('x86_64')
url='http://www.docker.io/'
license=('Apache')
depends=('bridge-utils' 'iproute2' 'device-mapper' 'sqlite' 'systemd')
makedepends=('git' 'go' 'btrfs-progs')
optdepends=('btrfs-progs: btrfs backend support'
            'lxc: lxc backend support')
# don't strip binaries! A sha1 is used to check binary consistency.
options=('!strip')
install=$pkgname.install
source=("git+https://github.com/dotcloud/docker.git#tag=v$pkgver"
        'docker-arm.patch'
        'btrfs-arm.patch'
        'netlink-uint8.patch')
md5sums=('SKIP'
         '47cc1cdf900af66660bfa3402012ea71'
         '23ee91f730c9420438f1969003c6693c'
         '0a52bdfc6b943d229b33743e77d583b3')

prepare() {
  cd "docker"
  patch -p1 -i ../docker-arm.patch
  patch -p1 -i ../btrfs-arm.patch
  patch -p1 -i ../netlink-uint8.patch
  find . -name '*.go' | xargs sed --in-place= -e 's/\/\/ +build amd64/\/\/ +build arm/'
  find . -name '*.go' | xargs sed --in-place= -e 's/\/\/ +build !linux !amd64/\/\/ +build !linux !arm/'
  find . -name '*.go' | xargs sed --in-place= -e 's/\/\/ +build linux,amd64/\/\/ +build linux,arm/'
}

build() {
  cd docker
  export AUTO_GOPATH=1
  ./hack/make.sh dynbinary
}

#check() {
#  cd "$_magic/docker"
#  # Will be added upstream soon
#  ./hack/make.sh dyntest
#}

package() {
  cd docker
  install -Dm755 "bundles/$pkgver/dynbinary/docker-$pkgver" "$pkgdir/usr/bin/docker"
  install -Dm755 "bundles/$pkgver/dynbinary/dockerinit-$pkgver" "$pkgdir/usr/lib/docker/dockerinit"
  # completion
  install -Dm644 "contrib/completion/bash/docker" "$pkgdir/usr/share/bash-completion/completions/docker"
  install -Dm644 "contrib/completion/zsh/_docker" "$pkgdir/usr/share/zsh/site-functions/_docker"
  # systemd
  install -Dm644 "contrib/init/systemd/docker.service" "$pkgdir/usr/lib/systemd/system/docker.service"
}
